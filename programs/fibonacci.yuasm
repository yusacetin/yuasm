#define i0 0
#define i1 1
#define i2 2
#define addr0 3
#define addr1 4
#define addr2 5
#define limit 6
#define four 7
#define cond 8
#define counter 9
#define one 10

// constant address values
#define num0_addr_val 0x0100
#define num1_addr_val 0x0104
#define num2_addr_val 0x0108

// initialize constants
loadm four 4
loadm addr0 num0_addr_val
loadm addr1 num1_addr_val
loadm addr2 num2_addr_val
loadm counter 0
loadm one 1
loadm limit 20

// initialize first two items
loadm i0 1
storen addr0 i0
loadm i1 1
storen addr1 i1

.loop:
// first load the previous two values to registers i0 and i1
loadr i0 addr0
loadr i1 addr1
add i2 i0 i1
storen addr2 i2

// increment item indices and counter
add addr0 addr0 four
add addr1 addr1 four
add addr2 addr2 four
add counter counter one

// check end condition (loop if counter < limit)
lt cond counter limit
jumpif loop cond

